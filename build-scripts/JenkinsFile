#!groovy
def mvnHome = env.MVN_HOME;
String nodeLabel = env.NODE_LABEL;
String repositoryName = 'carbon-apimgt';
node("${nodeLabel}") {
    try{
        stage('Preparation') {
            checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                      doGenerateSubmoduleConfigurations: false,
                      extensions                       : [[$class: 'LocalBranch', localBranch: 'master'],
                                                          [$class: 'RelativeTargetDirectory', relativeTargetDir: repositoryName]],
                      submoduleCfg: [],
                      userRemoteConfigs: [[url: 'https://github.com/wso2/carbon-apimgt']]]);
        }
        stage('Building carbon-apimgt with unit test') {
            // Run the maven build
            dir(repositoryName) {
                withEnv(["PATH+MAVEN=${mvnHome}/bin:${env.JAVA_HOME}/bin:${env.NODE_HOME}/bin"]) {
                    sh "mvn clean install"
                }
            }
        }
        stage('Running Test on H2 database') {
            runProfileTests(mvnHome,repositoryName,'local-h2');
        }
        stage('Running Test on Mysql database') {
            runProfileTests(mvnHome,repositoryName,'local-mysql');
        }
        stage('Running Test on Oracle database') {
            runProfileTests(mvnHome,repositoryName,'local-oracle');
        }
        stage('Running Test on PostgreSql database') {
            runProfileTests(mvnHome,repositoryName,'local-postgres');
        }
        stage('Running Test on Mssql database') {
            runProfileTests(mvnHome,repositoryName,'local-mssql');
        }
        currentBuild.result = 'SUCCESS'
    } catch (any) {
        currentBuild.result = 'FAILURE'
        throw any //rethrow exception to prevent the build from proceeding
    }finally{
        step([$class: 'JacocoPublisher', changeBuildStatus: true, exclusionPattern: '**/carbon/apimgt/authenticator/*.class,**/apimgt/ballerina/deployment/*.class,**/carbon/apimgt/authenticator/**/*.class,**/dto/*.class,**/exception/*.class,**/exceptions/*.class,**/models/*.class,**/models/**/*.class,**/rest/api/*/factories/*.class,**/rest/api/*/*.class', maximumBranchCoverage: '28', maximumClassCoverage: '70', maximumComplexityCoverage: '30', maximumInstructionCoverage: '55', maximumLineCoverage: '71', maximumMethodCoverage: '70', minimumBranchCoverage: '38', minimumClassCoverage: '70', minimumComplexityCoverage: '32', minimumInstructionCoverage: '55', minimumLineCoverage: '71', minimumMethodCoverage: '70'])
        step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: '', sendToIndividuals: true])
    }
}
def runProfileTests(String mvnHome,String repositoryName,String profileName){
    dir(repositoryName) {
        withEnv(["PATH+MAVEN=${mvnHome}/bin:${env.JAVA_HOME}/bin:${env.NODE_HOME}/bin"]) {
            sh "mvn verify -P ${profileName} -f components/apimgt/org.wso2.carbon.apimgt.core/pom.xml -Dskip.surefire.test=true"
        }
    }
}